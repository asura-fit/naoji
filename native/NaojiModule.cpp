/**
 * @author sey
 *
 * Version : $Id$
 * This file was generated by Aldebaran Robotics ModuleGenerator
 */

#include <iostream>
#include <cassert>

#include "alproxy.h"
#include "alptr.h"
#include "albroker.h"

#include <jni.h>       /* where everything is defined */
#include "NaojiModule.hpp"

using namespace AL;
using namespace Naoji;

#define NAOJI_AUTORUN 1

//______________________________________________
// constructor
//______________________________________________
NaojiModule::NaojiModule(ALPtr<ALBroker> pBroker, const std::string& pName) :
	ALModule(pBroker, pName) {
	setModuleDescription(
			"This an autogenerated module, this description need to be updated.");

	functionName("JVMTestFunction", "NaojiModule", "the JVMTestFunction.");
	setReturn("return", "Returns no value.");
	BIND_METHOD(NaojiModule::jvmTestFunction);

	isOk = true;
}

//______________________________________________
// destructor
//______________________________________________
NaojiModule::~NaojiModule() {

}

//______________________________________________
// version
//______________________________________________
std::string NaojiModule::version() {
	return ALTools_GetVersionString(NaojiModule_VERSION_MAJOR,
			NaojiModule_VERSION_MINOR, "0", "0");
}

/**
 * dataChanged. Called by ALMemory when subcription
 * has been modified.
 * @param pDataName, name of the suscribed data
 * @param pValue, value of the suscribed data
 * @param pMessage, message written by user during suscription
 */
void NaojiModule::dataChanged(const std::string& pDataName,
		const ALValue& pValue, const std::string& pMessage) {

}

/**
 * innerTest
 */
bool NaojiModule::innerTest() {
	bool result = true;
	// put here code dedicaced to autotest this module.
	// return false if fail, success otherwise
	result = isOk;
	return result;
}

/**
 * jvmTestFunction
 */
ALValue NaojiModule::jvmTestFunction() {
	JNIEnv *env; /* pointer to native method interface */
	int res;
	res = jvm->AttachCurrentThread((void**) &env, NULL);

	if (res < 0) {
		printf("error %d\n", res);
		isOk = false;
		return ALValue(-1);
	}
	/* invoke the Main.test method using the JNI */
	jclass cls = env->FindClass("jp/ac/fit/asura/naoji/NaojiModule");
	if (cls == NULL) {
		printf("cls is null\n");
		isOk = false;
		return ALValue(-2);
	}

	jmethodID mid = env->GetStaticMethodID(cls, "testSquare", "(I)I");
	if (mid == NULL) {
		printf("mid is null\n");
		isOk = false;
		return ALValue(-3);
	}

	int squared = env->CallStaticIntMethod(cls, mid, 10);
	jvm->DetachCurrentThread();

	return ALValue(squared);
}

void NaojiModule::initNaojiModule() {
	JNIEnv *env;
	int res = initJVM(&env);
	if (res < 0) {
		isOk = false;
		cerr << "Initilization failed. code:" << res;
		return;
	}
	assert(jvm != NULL);
	assert(env != NULL);

	initJavaModule(env);

#ifdef NAOJI_AUTORUN
	runJavaModule(env);
#endif

	jvm->DetachCurrentThread();
}

int NaojiModule::initJVM(JNIEnv **env) {
	JavaVMInitArgs vm_args;
	JavaVMOption options[4];

	int res;

	vm_args.version = JNI_VERSION_1_6;
	vm_args.options = options;
	vm_args.nOptions = 0;
	vm_args.ignoreUnrecognized = false;

	/*
	 * Set JVM options.
	 * We can use -Dxxx, -Xxxx, -verbose options.
	 * see http://java.sun.com/javase/ja/6/docs/ja/technotes/guides/jni/spec/invocation.html#wp16334
	 */
	options[vm_args.nOptions++].optionString
			= "-Djava.class.path=/home/root/naoji/classes:."; /* user classes */
	options[vm_args.nOptions++].optionString
			= "-Djava.library.path=/home/root/naoji/lib:."; /* set native library path */
	options[vm_args.nOptions++].optionString = "-Xms64m";
	options[vm_args.nOptions++].optionString = "-Xshare:off";
	//	options[vm_args.nOptions++].optionString = "-verbose:jni"; /* print JNI-related messages */
	//	options[vm_args.nOptions++].optionString = "-Djava.compiler=NONE"; /* disable JIT */

	/* Note that in the JDK, there is no longer any need to call
	 * JNI_GetDefaultJavaVMInitArgs.
	 */
	res = JNI_CreateJavaVM(&jvm, (void**) env, &vm_args);

	if (res < 0) {
		return res;
	}
	return 0;
}

int NaojiModule::initJavaModule(JNIEnv *env) {
	assert(jvm != NULL);
	// Get class object.
	jclass cls = env->FindClass("jp/ac/fit/asura/naoji/NaojiModule");
	assert(cls != NULL);

	// Get constructor method.
	jmethodID mid = env->GetMethodID(cls, "<init>", "()V");
	assert(mid != NULL);

	jobject obj = env->NewObject(cls, mid);
	assert(obj != NULL);

	// Get global reference.
	naojiObj = env->NewGlobalRef(obj);
	assert(obj != NULL);

	jmethodID initMid = env->GetMethodID(cls, "init", "()V");
	assert(initMid != NULL);

	env->CallVoidMethod(obj, initMid);

	return 0;
}

void NaojiModule::runJavaModule(JNIEnv *env) {
	assert(jvm != NULL);
	assert(naojiObj != NULL);

	jclass naojiClass = env->GetObjectClass(naojiObj);

	jmethodID startMid = env->GetMethodID(naojiClass, "start", "()V");
	assert(startMid != NULL);

	env->CallVoidMethod(naojiObj, startMid);
}

void NaojiModule::exitNaojiModule() {
	/* We are done. */
	exitJavaModule();
	exitJVM();
}

void NaojiModule::exitJavaModule() {
	assert(jvm != NULL);
	assert(naojiObj != NULL);

	JNIEnv *env; /* pointer to native method interface */
	int res;
	res = jvm->AttachCurrentThread((void**) &env, NULL);
	assert(res >= 0);

	jclass naojiClass = env->GetObjectClass(naojiObj);

	jmethodID exitMid = env->GetMethodID(naojiClass, "exit", "()V");
	assert(exitMid != NULL);

	env->CallVoidMethod(naojiObj, exitMid);

	env->DeleteGlobalRef(naojiClass);
	env->DeleteGlobalRef(naojiObj);
	naojiObj = NULL;

	jvm->DetachCurrentThread();
}

void NaojiModule::exitJVM() {
	jvm->DestroyJavaVM();
	jvm = NULL;
}
